import requests
import urllib.request
import json
import os
import time
import progressbar

class YaUploader:
    def __init__(self, token: str):
        self.token = token

    def create_folder(path):
        """Создание папки."""
        try:
            URL = 'https://cloud-api.yandex.net/v1/disk/resources'
            response2 = requests.get(f'{URL}?path={path}', headers={'Authorization': 'OAuth ' + token_ya}).json()
            assert 'test5' in response2['_embedded']['items'][0]['path']

        except:
            return requests.put(f'{URL}?path={path}', headers={'Authorization': 'OAuth ' + token_ya}).json()

    def create_folder_img(path):
        """Создание имени картинки."""
        URL = 'https://cloud-api.yandex.net/v1/disk/resources'
        path1 = f'test5/{path["likes"]}.jpg'
        try:
            response2 = requests.get(f'{URL}?path={path1}', headers={'Authorization': 'OAuth ' + token_ya}).json()
            # print(response2)
            count = 0
            if os.path.isfile(response2['file']):
                return f'{path["likes"]}.jpg'
            else:
                return f'{path["likes"]}_{count + 1}.jpg'
            assert KeyError
        except:
            return f'{path["likes"]}.jpg'



    def upload(self, file_path: str, count_photos):
        """Метод загружает файлы по списку file_list на яндекс диск"""

        for name in file_path:
            # print(name)
            url_photos = f'''{name['url']}'''

            name_folder = 'test5'
            YaUploader.create_folder(name_folder)
            name_photos = YaUploader.create_folder_img(name)
            # print(name_photos)
            upload_url = 'https://cloud-api.yandex.net/v1/disk/resources/upload?path='
            savefile = f'{name_folder}/{name_photos}'
            params4 = {'url': f'{name_folder}/{name_photos}'}
            response = requests.get(f'{upload_url}/{savefile}', headers={'Authorization': 'OAuth ' + self.token}, params=params4).json()
           
            url_photo = name["url"]
            #получить двоичный код картинки
            img_file = urllib.request.urlopen(url_photo)
            htmltext = img_file.read()
            # print(htmltext)

            # сохраняет картинку по урл на яндекс диск
            if count_photos != 0:
                files = {'file': (name_photos, htmltext, 'image/png')}
                response1 = requests.post(response['href'], files=files)
                # print(response1.status_code)
                print('\nЗагрузка изображения №', count_photos,'на Яндекс Диск\n')

                for i in progressbar.progressbar(range(100)):
                    time.sleep(0.02)
                count_photos -= 1

            else:
                break


class VkUser:
    url_api_vk = 'https://api.vk.com/method/'
    def __init__(self,token):
        self.params = {
            'access_token': token,
            'v': '5.131'
        }
    def user(self, user_id=None):
        url_use = self.url_api_vk + 'users.get'
        params = {
            'user': '1',
            'access_token': token,
            'fields': 'photo_max_orig',
            'v': '5.131'
        }
        #photo_max_orig URL фотографии максимального размера.
        #counters значение fields возвращает о количество фото и альбомах и т.д.
        req = requests.get(url_use, params=params)
        #
        return req.json()['response'][0]['id']


    def photos(self, user_id=None):
        url_photos = self.url_api_vk + 'photos.get'
        photos_params = {
            'owner_id': vk_client.user(user_id),
            'album_id': 'profile',
            'extended': 1,
            'count': 10,
            'photo_sizes': 1
        }

        req = requests.get(url_photos, params={**self.params, **photos_params})
        return req.json()['response']['items']

    def photos_max(self, list_photo):
        list_album = []
        list_album_new = []
        list_photo_url_likes = []
        for album in list_photo:
            album['sizes'] = sorted(album['sizes'], key=lambda user: user['type'])
            # print(album)
            # print(album['sizes'])
            # list_album_new.append(list_album[-1])
        for id in list_photo:
            # print(id['sizes'][-1]['url'])
            # print(id['likes']['count'])
            list_photo_url_likes.append({'url':id['sizes'][-1]['url'], 'likes':id['likes']['count'], 'type':id['sizes'][-1]['type']})
        return list_photo_url_likes


def photos_laik(list_photo):
    list_photo_new = []
    dict_photo_new = []
    # print(list_photo)
    for y in list_photo:
        # print(y)
        y.pop('url')
        y['file_name'] = str(y.pop('likes')) + '.jpg'
        y['size'] = y.pop('type')
        list_photo_new.append(y)
    # print(list_photo_new)
    with open('photo.json', 'a', encoding='utf-8') as file:
        json.dump(list_photo_new, file)
        file.write('\n')
    return list_photo_new


if __name__ == '__main__':
    id_client = int(input('id пользователя: '))
    count_photos = int(input('Сохранить на Яндекс Диск (количество фотографий): '))
    token = ''
    # id_client = 'https://vk.com/begemot_korovin'
    # id_client = 552934290
    # count_photos = 5
    vk_client = VkUser(token)
    # print(vk_client.user(id_client))
    vk_client.photos(id_client)
    vk_client.photos_max(vk_client.photos(id_client))
    list_photo = vk_client.photos_max(vk_client.photos(id_client))
    # print(list_photo)
    photos_laik(list_photo)
    # print(vk_client.photos_laik(vk_client.photos_max(vk_client.photos(id_client))))
    # print(vk_client.photos_get_user(id_client))


    path_to_file = vk_client.photos_max(vk_client.photos(id_client))
    # print(path_to_file)
    token_ya = ''
    uploader = YaUploader(token='')
    result = uploader.upload(path_to_file,count_photos)
